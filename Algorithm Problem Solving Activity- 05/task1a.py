# -*- coding: utf-8 -*-
"""CSE221_Lab-05_Task_01(A).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tfJeOa4d0OU0GkjY0sEkI88kDMpLA8Fi
"""

#Task- 01 A
file = open('input1a_3.txt','r')
output_file = open('output1a_3.txt','w')
N, M = map(int, file.readline().split())
prereq = [tuple(map(int, file.readline().split())) for i in range(M)]

def dfs(vtx, graph, visited, s):
  visited[vtx] = 1
  for adj in graph[vtx]:
    if visited[adj] == 0:
      if not dfs(adj, graph, visited, s):
        return False
    elif visited[adj] == 1:
      return False
  visited[vtx] = 2
  s.append(vtx)
  return True

def topological_sort(N, prereq_course):
    graph = [[] for i in range(N+1)]
    for A, B in prereq_course:
        graph[A].append(B)

    visited = [0] * (N+1)
    sort = []

    for i in range(1, N+1):
        if visited[i] == 0:
            if not dfs(i, graph, visited, sort):
                return "IMPOSSIBLE"

    return sort[::-1]

course_order = topological_sort(N, prereq)

if course_order == "IMPOSSIBLE":
  output_file.write("IMPOSSIBLE")
else:
  for r in course_order:
    output_file.write(str(r) + " ")

file.close()
output_file.close()